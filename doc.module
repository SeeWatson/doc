<?php
/**
 * Set global array to configure core entity links
 */
$GLOBALS['doc_entities'] = array(
	'node_type_form' => array(
		'#entity' => 'content type',
		'#fieldset' => 'additional_settings',
		'#id' => array('type','#default_value'),
		'#submit_id' => array('values','name'),
	),
	'update_manager_install_form' => array(
		'#entity' => 'module',
		'#id' => array(''),
		'#submit_id' => array(''),
	),
	'taxonomy_form_vocabulary' => array(
		'#entity' => 'taxonomy',
		'#id' => array('vid','#value'),
		'#submit_id' => array('values','vid'),
	),
	'block_add_block_form' => array(
		'#entity' => 'block',
		'#id' => array('delta','#value'),
		'#submit_id' => array('values','delta'),
	),
	'block_admin_configure' => array(
		'#entity' => 'block',
		'#id' => array('delta','#value'),
		'#submit_id' => array('values','delta'),
	),
	'menu_edit_menu' => array(
		'#entity' => 'menu',
		'#id' => array('menu_name','#default_value'),
		'#submit_id' => array('values','menu_name'),
	),
	'system_theme_settings' => array(
		'#entity' => 'theme',
		'#id' => array('var','#value'),
		'#submit_id' => array('values','var'),
	),
);


/**
 * Implement hook_permission().
 */
function doc_permission() {
	return array(
	'administer documentation' => array(
	'title' => t('Administer documentation'),
	'description' => t('Allow editing of documentation by user.'),
	),
	'view documentation' => array(
	'title' => t('View documentation'),
	'description' => t('Allow viewing of documentation by user.'),
	),
	);
}

/**
 * Implements hook_help().
 */
function doc_help($path, $arg) {
	switch ($path) {
		case 'admin/help#documentation':
			return t('The documentation module provides a framework for documenting all aspects of a Drupal installation');
		case 'admin/config/system/documentation':
			return t('The documentation module provides a framework for documenting all aspects of a Drupal installation');
	}
}

/**
 * Implements hook_menu().
 */
function doc_menu() {
	$items['admin/config/system/documentation'] = array(
		'title' => 'Documentation',
		'description' => "View the documentation for this site's implementation of Drupal.",
		'page callback' => 'drupal_get_form',
		'page arguments' => array('doc_admin_settings_form'),
		'access arguments' => array('administer documentation'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'doc.admin.inc',
	);
	$items['admin/reports/documentation'] = array(
		'title' => 'Documentation',
		'description' => "View the documentation for this site's implementation of Drupal.",
		'page callback' => 'doc_documentation',
		'access arguments' => array('view documentation'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'doc.admin.inc',
	);
	return $items;
}
/**
 * Implements hook_form_alter().
 */
function doc_form_alter(&$form, &$form_state, $form_id) {
	global $doc_entities;

	if(isset($form_id) && array_key_exists($form_id,$doc_entities) && $form['#submit'][0] != 'taxonomy_vocabulary_confirm_delete_submit') {
		$doc_entity_id = doc_convertArrayToKeys($doc_entities[$form_id]['#id'],$form);
		doc_generateFields($form,$form_id);
		
		module_load_include('inc', 'doc', 'doc.admin');
		$form['#submit'][] = 'doc_form_alter_submit_handler';
	}
		
//	dsm($form);
}
/**
 * This function generates the documentation field
 */
function doc_generateFields(&$form,&$form_id) {
	global $doc_entities;

	$id = doc_convertArrayToKeys($doc_entities[$form_id]['#id'],$form);	
	$entity = $doc_entities[$form_id]['#entity'];
	$fieldset = doc_isset($doc_entities[$form_id],'fieldset');

	$doc_field = array(
		'#type' => 'fieldset',
		'#title' => 'Documentation',
		'#collapsible' => true,
		'#group' => $fieldset,
		'documentation' => array(
			'#title' => 'Create Documentation',
			'#type' => 'textarea',
			'#description' => t('Provide documentation for this @entity.',array('@entity' => $entity)),
			'#default_value' => variable_get("doc_{$entity}_{$id}"),
		),
	);
		
	$form['doc']['fieldset'] = $doc_field;
}

/**
 * This is a convenience function that replaces PHP's native isset
 */
function doc_isset($var,$index=false,$default_value='') {
	$return_value = (isset($var) ? $var : $default_value);

	if($index){
		$return_value = (isset($var[$index]) ? $var[$index] : $default_value);
	}

	return $return_value;
}
/**
 * This is a convenience function that allows for array key paths to be encoded in another array
 */
function doc_convertArrayToKeys($keys,$arrayToAccess){
	if(count($keys) > 1) 
		if(isset($arrayToAccess[$keys[0]])){
			return doc_convertArrayToKeys(array_slice($keys, 1), $arrayToAccess[$keys[0]]);
		} else
			return '';
	else
		return $arrayToAccess[$keys[0]];	
}